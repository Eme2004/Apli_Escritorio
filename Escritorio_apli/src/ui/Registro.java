/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui;

import Servicio.GestorTareas;
import dominio.Tarea;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author USER
 */
public class Registro extends javax.swing.JFrame {
    // Modelo de tabla para almacenar y manipular los datos que se muestran en la JTable
    private DefaultTableModel modeloTabla;

    /**
     * Constructor de la clase Registro, crea la ventana y configura la tabla
     */
    public Registro() {
        initComponents();     // Inicializa los componentes gráficos generados por GUI Builder
        configurarTabla();    // Configura el modelo y columnas de la tabla
        cargarTareas();       // Carga las tareas desde el gestor para mostrar en la tabla
    }

    // Método para configurar el modelo de la tabla y sus columnas
    private void configurarTabla() {
        // Nombres de las columnas de la tabla
        String[] columnas = {"ID", "Título", "Prioridad", "Estado", "★", "Fecha"};
        // Crear un modelo con esas columnas y 0 filas inicialmente
        modeloTabla = new DefaultTableModel(columnas, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Hace que las celdas no sean editables directamente
            }
        };
        // Asignar el modelo configurado a la JTable
        tblTareas.setModel(modeloTabla);
    }

    // Método que carga las tareas desde el gestor y las muestra en la tabla
    public void cargarTareas() {
        DefaultTableModel modelo = (DefaultTableModel) tblTareas.getModel();
        modelo.setRowCount(0); // Limpia todas las filas para refrescar la tabla

        // Obtener la instancia del gestor de tareas
        GestorTareas gestor = GestorTareas.obtenerInstancia();
        List<Tarea> tareas = gestor.listarTodas(); // Obtener lista actualizada de tareas

        // Recorrer todas las tareas y agregar una fila por cada una
        for (Tarea t : tareas) {
            modelo.addRow(new Object[]{
                t.getId(),                          // ID
                t.getTitulo(),                      // Título
                t.getPrioridadTexto(),              // Prioridad en texto (Alta, Media, Baja)
                t.getEstadoTexto(),                 // Estado en texto (Hecho, Pendiente)
                t.isEspecial() ? "★" : "",          // Estrella si es tarea especial
                t.getFecha() != null ? t.getFecha().toString() : "" // Fecha en formato texto o vacío
            });
        }
    }

    // Método público para refrescar/actualizar la tabla desde otras clases o eventos
    public void actualizar() {
        cargarTareas();
    }




    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblTareas = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnEliminar = new javax.swing.JButton();
        btnAlternar = new javax.swing.JButton();
        btnDeshacer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblTareas.setBackground(new java.awt.Color(204, 255, 255));
        tblTareas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Titulo", "Prioridad", "Fecha", "Estado", "Especial ★"
            }
        ));
        tblTareas.setGridColor(new java.awt.Color(0, 0, 0));
        tblTareas.setSelectionBackground(new java.awt.Color(0, 0, 0));
        tblTareas.setShowGrid(true);
        jScrollPane1.setViewportView(tblTareas);

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnAlternar.setText("Alternar");
        btnAlternar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlternarActionPerformed(evt);
            }
        });

        btnDeshacer.setText("Deshacer");
        btnDeshacer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeshacerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(btnAlternar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDeshacer)
                .addGap(114, 114, 114)
                .addComponent(btnEliminar)
                .addGap(114, 114, 114))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEliminar)
                    .addComponent(btnAlternar)
                    .addComponent(btnDeshacer))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 679, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // Obtener la fila seleccionada en la tabla
        int fila = tblTareas.getSelectedRow();

        // Si no hay fila seleccionada, mostrar advertencia y salir
        if (fila == -1) {
    JOptionPane.showMessageDialog(this,
        "Por favor, seleccione una tarea para eliminar.",
        "Advertencia",
        JOptionPane.WARNING_MESSAGE);
    return; // Sale del método sin hacer nada más
}

// Obtener el ID de la tarea de la fila seleccionada (columna 0)
long id = (Long) tblTareas.getValueAt(fila, 0);

// Obtener la instancia del gestor de tareas
GestorTareas gestor = GestorTareas.obtenerInstancia();
// Obtener la lista completa de tareas
List<Tarea> tareas = gestor.listarTodas();

// Buscar la tarea que coincida con el ID seleccionado
Tarea seleccionada = tareas.stream()
    .filter(t -> t.getId() == id)
    .findFirst()
    .orElse(null);

// Si la tarea existe (se encontró)
if (seleccionada != null) {
    // Eliminar (ocultar) la tarea a través del gestor
    gestor.eliminarTarea(seleccionada);

    // Informar al usuario que la tarea fue eliminada (oculta)
    JOptionPane.showMessageDialog(this,
        "Tarea eliminada (oculta). Puede usar 'Deshacer' si es necesario.",
        "Eliminada",
        JOptionPane.INFORMATION_MESSAGE);

    // Recargar la tabla para reflejar los cambios
    cargarTareas();
}
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnAlternarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlternarActionPerformed
        // Obtiene la fila seleccionada en la tabla
        int fila = tblTareas.getSelectedRow();

        // Si no hay fila seleccionada, muestra un mensaje de advertencia y sale del método
        if (fila == -1) {
    JOptionPane.showMessageDialog(this,
        "Por favor, seleccione una tarea para alternar el estado.",
        "Advertencia",
        JOptionPane.WARNING_MESSAGE);
    return;
}

      // Obtiene el ID de la tarea en la fila seleccionada (columna 0)
    long id = (Long) tblTareas.getValueAt(fila, 0);

// Obtiene la instancia única del gestor de tareas
GestorTareas gestor = GestorTareas.obtenerInstancia();
// Obtiene la lista actual de tareas
List<Tarea> tareas = gestor.listarTodas();

// Busca la tarea cuyo ID coincida con el seleccionado en la tabla
Tarea seleccionada = tareas.stream()
    .filter(t -> t.getId() == id)
    .findFirst()
    .orElse(null);

// Si la tarea fue encontrada
if (seleccionada != null) {
    // Cambia el estado (pendiente <-> hecho) usando el gestor
    gestor.alternarEstado(seleccionada);

    // Muestra mensaje confirmando el cambio de estado
    JOptionPane.showMessageDialog(this,
        "Estado actualizado para: " + seleccionada.getTitulo(),
        "Estado Cambiado",
        JOptionPane.INFORMATION_MESSAGE);
}

    }//GEN-LAST:event_btnAlternarActionPerformed

    private void btnDeshacerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeshacerActionPerformed
        // Obtener la instancia del gestor de tareas
        GestorTareas gestor = GestorTareas.obtenerInstancia();

    // Intentar deshacer la última eliminación
    if (gestor.deshacerEliminacion()) {
    // Si se pudo deshacer, informar al usuario
    JOptionPane.showMessageDialog(this,
        "Última eliminación deshecha.",
        "Deshacer",
        JOptionPane.INFORMATION_MESSAGE);

    // Recargar la tabla para mostrar la tarea restaurada
    cargarTareas();
} else {
    // Si no había eliminaciones para deshacer, informar también
    JOptionPane.showMessageDialog(this,
        "No hay eliminaciones para deshacer.",
        "Información",
        JOptionPane.INFORMATION_MESSAGE);
}
    }//GEN-LAST:event_btnDeshacerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Registro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Registro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Registro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Registro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Registro().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlternar;
    private javax.swing.JButton btnDeshacer;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblTareas;
    // End of variables declaration//GEN-END:variables
}
